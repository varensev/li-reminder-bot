const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');
const { createClient } = require('@supabase/supabase-js');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = ['SUPABASE_URL', 'SUPABASE_KEY', 'TELEGRAM_BOT_TOKEN'];
const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);

if (missingVars.length > 0) {
  console.error(`–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${missingVars.join(', ')}`);
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {polling: true});

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á cron
const activeTasks = {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initDatabase() {
  try {
    const { error } = await supabase
      .from('reminders')
      .select('*')
      .limit(1);
      
    if (error && error.code !== '42P01') {
      throw error;
    }
    
    if (error?.code === '42P01') {
      const { error: createError } = await supabase.rpc(`
        CREATE TABLE reminders (
          id SERIAL PRIMARY KEY,
          chat_id BIGINT NOT NULL UNIQUE,
          active BOOLEAN NOT NULL DEFAULT false,
          interval_minutes INTEGER NOT NULL DEFAULT 60,
          last_reminder TIMESTAMP WITH TIME ZONE,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now())
        );
      `);
      
      if (createError) throw createError;
      console.log('–¢–∞–±–ª–∏—Ü–∞ reminders —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
function sendCommandKeyboard(chatId, message = '') {
  const keyboard = {
    reply_markup: {
      keyboard: [
        ['/remind', '/stop'],
        ['/interval 30', '/interval 60', '/interval 120'],
        ['/published']
      ],
      resize_keyboard: true
    }
  };
  
  if (message) {
    bot.sendMessage(chatId, message, keyboard);
  } else {
    const defaultMessage = `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n
/remind - –Ω–∞—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/interval X - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª X –º–∏–Ω—É—Ç (30, 60, 120)
/published - –æ—Ç–º–µ—Ç–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é`;
    
    bot.sendMessage(chatId, defaultMessage, keyboard);
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  try {
    await initDatabase();
    sendCommandKeyboard(chatId, `–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–Ω—Ç–µ—Ä–≤–∞–ª 60 –º–∏–Ω—É—Ç.`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /remind - –Ω–∞—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
bot.onText(/\/remind/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    const { data: existing, error: checkError } = await supabase
      .from('reminders')
      .select('*')
      .eq('chat_id', chatId);
      
    if (checkError) throw checkError;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    let interval = 60;
    if (existing.length > 0) {
      interval = existing[0].interval_minutes;
    } else {
      const { error: insertError } = await supabase
        .from('reminders')
        .insert([{ chat_id: chatId, active: true, interval_minutes: interval }]);
        
      if (insertError) throw insertError;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (activeTasks[chatId]) {
      activeTasks[chatId].stop();
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É cron
    const cronPattern = `*/${interval} * * * *`;
    const task = cron.schedule(cronPattern, async () => {
      try {
        const { data } = await supabase
          .from('reminders')
          .select('active')
          .eq('chat_id', chatId)
          .single();
          
        if (data?.active) {
          await supabase
            .from('reminders')
            .update({ last_reminder: new Date().toISOString() })
            .eq('chat_id', chatId);
            
          bot.sendMessage(chatId, `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç! (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${interval} –º–∏–Ω)`);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ cron:', error);
      }
    });
    
    activeTasks[chatId] = task;
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    const { error: updateError } = await supabase
      .from('reminders')
      .update({ active: true })
      .eq('chat_id', chatId);
      
    if (updateError) throw updateError;
    
    sendCommandKeyboard(
      chatId, 
      `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${interval} –º–∏–Ω—É—Ç.\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π /interval X —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª.\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π /stop —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.`
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /remind:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /interval - –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª
bot.onText(/\/interval (\d+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const minutes = parseInt(match[1]);
  
  if (isNaN(minutes)) {
    return sendCommandKeyboard(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.');
  }
  
  if (minutes < 5 || minutes > 1440) {
    return sendCommandKeyboard(
      chatId, 
      '–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 1440 –º–∏–Ω—É—Ç (24 —á–∞—Å–∞).\n' +
      '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 30, 60, 120, 240 –º–∏–Ω—É—Ç.'
    );
  }
  
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –±–∞–∑–µ
    const { error: updateError } = await supabase
      .from('reminders')
      .upsert({ 
        chat_id: chatId, 
        interval_minutes: minutes 
      }, { 
        onConflict: 'chat_id' 
      });
      
    if (updateError) throw updateError;
    
    // –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
    const { data } = await supabase
      .from('reminders')
      .select('active')
      .eq('chat_id', chatId)
      .single();
      
    if (data?.active) {
      bot.sendMessage(chatId, `–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${minutes} –º–∏–Ω—É—Ç. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...`);
      return bot.onText(/\/remind/, msg); // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ /remind
    }
    
    sendCommandKeyboard(chatId, `–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${minutes} –º–∏–Ω—É—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /remind —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /interval:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
bot.onText(/\/stop/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É cron
    if (activeTasks[chatId]) {
      activeTasks[chatId].stop();
      delete activeTasks[chatId];
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
    const { error } = await supabase
      .from('reminders')
      .update({ active: false })
      .eq('chat_id', chatId);
      
    if (error) throw error;
    
    sendCommandKeyboard(chatId, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π /remind —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /stop:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /published - –æ—Ç–º–µ—Ç–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é
bot.onText(/\/published/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É cron
    if (activeTasks[chatId]) {
      activeTasks[chatId].stop();
      delete activeTasks[chatId];
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
    const { error } = await supabase
      .from('reminders')
      .update({ active: false })
      .eq('chat_id', chatId);
      
    if (error) throw error;
    
    sendCommandKeyboard(chatId, 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /published:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (error) => {
  console.error('Unhandled Rejection:', error);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGTERM. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...');
  Object.values(activeTasks).forEach(task => task.stop());
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGINT. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...');
  Object.values(activeTasks).forEach(task => task.stop());
  process.exit(0);
});

console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');